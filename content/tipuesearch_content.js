var tipuesearch = {"pages": [{'title': 'About', 'text': '小組倉儲: \n https://github.com/40823236/stage3-bg3 \n https://github.com/40823202/stage3-bg3 \n https://gitlab.com/40823203/stage3-bg3 \n https://github.com/40823212/stage3-bg3 \n https://github.com/40823219/stage3-bg3 \n https://github.com/40823222/stage3-bg3 \n https://github.com/40823231-2/stage3-bg3 \n https://github.com/40823244/stage3-bg3 \n 組員: \n 40823202 / 40823202 \n 40823203 / 40823203 \n 40823212 / 40823212 \n 40823219 / 40823219 \n 40823222 / 40823222 \n 40823231 / 40823231 \n 40823236 / 40823236 \n 40823244 / 40823244 \n', 'tags': '', 'url': 'About.html'}, {'title': '每周進度', 'text': '每周進度更新 \n', 'tags': '', 'url': '每周進度.html'}, {'title': 'W9', 'text': '統整組員stage1、stage2的專案。 \n', 'tags': '', 'url': 'W9.html'}, {'title': 'Stage1', 'text': 'bg7 \n 主題:三爪夾頭 \n 原理 夾頭底座的齒條和齒盤導軌嚙合,齒盤的斜面與斜 齒輪嚙合,當斜齒輪轉動時,帶動齒盤轉動,齒盤 背面的導軌也跟著轉動,讓夾頭底座的齒條跟著導 軌向中心移動,進而夾持工件。 \n 繪製零件:40823212 \n 程式模擬:40823236 \n bg12 \n 主題: 鋁罐壓扁機 \n 原理:利用直線運動機構分為精確直線運動機構和近似直線運動機構兩類。其中精確直線運動機構的設計思想主要有兩種：一種是利用幾何中的反演變換，把連杆末端的圓弧路徑反演為直線，用機械反演器可以完成這一功能；另一種則是通過兩個不平行的連杆結構，把路徑限制在兩個平面的交線。近似直線運動機構則是通過多個杆件實現自由度為1的連接，調整杆件的長度使得一點的運動軌跡中包含一段近似直的線段。 \n 繪製零件:40823203 \n 程式模擬:40823202 \n bg19 \n 主題:格鬥機器人 \n 原理:彈射機器人，他的問題是攻擊破壞性低，很難直接將對手擊殺，只能讓對手憑重力下來把自己摔壞或把對手丟進OUT區。彈射主要攻擊方式壓縮氣體沖入汽缸，汽缸快速反應，彈射板才能彈起來 \n 繪製人員:40823219、40823231 \n 程式模擬:40823219、40823231 \n bg22 \n 主題:自動磨豆機 \n 原理 利用輾壓研磨原理，讓咖啡豆在兩塊圓錐鐵中輾壓研磨，錐鐵的距離決定咖啡粉的粗細程度，錐鐵間的距離愈近，粉末愈細；反之，粉末愈粗。 \n 繪製組員:40823244\xa0 \n 程式模擬:40823222\xa0 \n', 'tags': '', 'url': 'Stage1.html'}, {'title': 'Stage2', 'text': 'bg9 \n 主題:蒸汽火車 \n 原理 它是利用燃燒柴油或煤炭等燃料，將鍋爐中的水加熱以產生蒸氣，再由汽缸動力經連桿傳動機構，來推動輪子使車子前進。 \n 繪圖: 40823212 \n 模擬:40823219，40823231、40823236 \n bg10 \n 主題:彈珠軌道 \n 原理:1.運用阿基米得原理，讓彈珠可以沿著一個平面向上移動。 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa02.運用凸輪原理，使其做一個上下的使其做一個上下的反覆運動，讓彈珠可以像爬階梯一樣。 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa03.用圓盤的轉動，將球運送至彈珠台(控制圓盤的轉數去查看彈珠的運動軌跡)。 \n 繪圖: 40823202 、40823203 、40823244\xa0 \n 模擬:40823202 、40823222\xa0 \n', 'tags': '', 'url': 'Stage2.html'}, {'title': 'W10', 'text': '\n', 'tags': '', 'url': 'W10.html'}, {'title': 'task1', 'text': '讀取  stage3_2b.txt , 建立 Stage3 的分組倉儲, 分組網頁, 以及各組員倉儲及網頁連結. \n stage3-bg1 repo  |  stage3-bg1 site  |  40823245 repo  |  40823245 site  |  40823251 repo  |  40823251 site  |  40823208 repo  |  40823208 site  |  40823213 repo  |  40823213 site  |  40823232 repo  |  40823232 site  |  40823234 repo  |  40823234 site  |  40823235 repo  |  40823235 site  |  40823246 repo |  40823246 site ---------- stage3-bg2 repo  |  stage3-bg2 site  |  40823217 repo  |  40823217 site  |  40823201 repo  |  40823201 site  |  40823209 repo  |  40823209 site  |  40823210 repo  |  40823210 site  |  40823206 repo  |  40823206 site  |  40823207 repo  |  40823207 site  |  40823223 repo  |  40823223 site  |  40823224 repo |  40823224 site ---------- stage3-bg3 repo  |  stage3-bg3 site  |  40823236 repo  |  40823236 site  |  40823202 repo  |  40823202 site  |  40823203 repo  |  40823203 site  |  40823212 repo  |  40823212 site  |  40823219 repo  |  40823219 site  |  40823222 repo  |  40823222 site  |  40823231-2 repo  |  40823231-2 site  |  40823244 repo |  40823244 site ---------- stage3-bg4 repo  |  stage3-bg4 site  |  40823239 repo  |  40823239 site  |  s40723140 repo  |  s40723140 site  |  s40723128 repo  |  s40723128 site  |  s40723139 repo  |  s40723139 site  |  s40723106 repo  |  s40723106 site  |  s40723135 repo  |  s40723135 site  |  s40723143 repo  |  s40723143 site  |  s40723215 repo |  s40723215 site ---------- stage3-bg5 repo  |  stage3-bg5 site  |  40823221 repo  |  40823221 site  |  40823204 repo  |  40823204 site  |  40823205 repo  |  40823205 site  |  40823220 repo  |  40823220 site  |  40823228 repo  |  40823228 site  |  40823237 repo  |  40823237 site  |  40823242 repo  |  40823242 site  |  40823250 repo |  40823250 site  |  40832244 repo |  40832244 site ---------- stage3-bg6 repo  |  stage3-bg6 site  |  40823225 repo  |  40823225 site  |  40823214 repo  |  40823214 site  |  40823218 repo  |  40823218 site  |  40823211 repo  |  40823211 site  |  40823248 repo  |  40823248 site  |  40823247 repo  |  40823247 site  |  40823216 repo  |  40823216 site  |  40823238 repo |  40823238 site ---------- stage3-bg7 repo  |  stage3-bg7 site  |  40623144 repo  |  40623144 site  |  40823233 repo  |  40823233 site  |  s40723224 repo  |  s40723224 site  |  40823241 repo  |  40823241 site  |  40423155 repo  |  40423155 site  |  40823227 repo  |  40823227 site  |  s40723233 repo  |  s40723233 site ---------- \n', 'tags': '', 'url': 'task1.html'}, {'title': 'w11', 'text': '', 'tags': '', 'url': 'w11.html'}, {'title': 'task2', 'text': '使用白窗控制Coppeliasim \n \n \n 程式碼參考第一組成員40823245~ \n', 'tags': '', 'url': 'task2.html'}, {'title': 'w12', 'text': '', 'tags': '', 'url': 'w12.html'}, {'title': '小組討論內容', 'text': '\n 構想: 利用stage2-bg10(彈珠檯)以及stage2-bg9(火車)結合，並新增兩台機器， \n 使用火車搭配鐵軌進行運送，將球運送至每台機器上。 \n 功能說明: \n 第一台為stage2-bg10的彈珠台，球體運送完後會自行進行模擬 \n 第二台為新版彈珠台，主要控制為拉桿，透過拉桿將球體彈出，所觸碰到的機關會計算分數 \n 第三台為迷宮，透過控制迷宮板使球體移動來通關迷宮 \n 構想圖: \n', 'tags': '', 'url': '小組討論內容.html'}, {'title': 'w13', 'text': '', 'tags': '', 'url': 'w13.html'}, {'title': 'robodk測試', 'text': '進行robodk測試 \n \n 分解步驟: \n 1.先開啟ipv4，之後開啟robodk，之後開啟robodk.exe(F:\\robodk522_portable\\bin) \n 2.在robodk開啟我們要的範例pick_and_place_with_python.rdk(F:\\robodk522_portable\\examples\\ pick_and_place) \n \n 3.將pick_and_place.py(F:\\robodk522_portable\\examples\\ pick_and_place )放到編輯器裡，將改成式的第78行(先開view的line numbers) \n \n 4.將RDK = Robolink(robodk_path="改成你資料夾內到 RoboDK.exe的位址 " \n \n 5.在roboDK裡選工具>選項>其他>點選api服務器ip，將此行ip複製到^-^ \n RDK = Robolink(robodk_path=" 改成你資料夾內到 RoboDK.exe的位址 ", robodk_ip=\' ^-^ \')，之後按go \n \n 6.再來換改 roboDK裡選工具>選項>python， 將你電腦白窗裡跑出的用灰色框起來的那串藍色的字，放到python編輯器裡，將python解釋器改成python.exe \n \n 7.去白窗執行go，即可成功(如有看不懂的步驟，請查閱上面影片)', 'tags': '', 'url': 'robodk測試.html'}, {'title': 'w14', 'text': '', 'tags': '', 'url': 'w14.html'}, {'title': 'python學習', 'text': '1.Setting（設定引入一些庫函式等、引數等） 2.Init（關閉其他連線、通訊檢測） 3.Configuration（配置控制代碼，設定同步模式等） 4.Simulation（設定模擬引數） 5.CoreControl （在模擬大迴圈裡面寫規劃與控制） \n \n Step1. Setting \n \n Step2. Init \n \n Step3. Configuration \n \n Step4：Simulation \n \n Step5. CoreControl \n', 'tags': '', 'url': 'python學習.html'}, {'title': '零件圖', 'text': '', 'tags': '', 'url': '零件圖.html'}, {'title': '彈珠檯', 'text': '第一版 \n 主體 \n \n 擊球機構 \n \n 往復機構 \n \n', 'tags': '', 'url': '彈珠檯.html'}, {'title': '迷宮', 'text': '第一版 \n 組合圖 \n \n 迷宮檯面 \n \n 旋轉機構 \n \n 旋轉軸 \n \n \n 第二版 \n 迷宮 \n 零件下載： 點我 . \n 組合圖： \n \n 迷宮主體： \n \n 第二層支架： \n \n 第三層支架： \n \n 桿子四個(用來連接支架的)： \n \n 風扇機構： \n \n 風扇連接桿： \n \n 滑板機構： \n \n 連接滑板機構： \n \n \n \n ======= \n', 'tags': '', 'url': '迷宮.html'}, {'title': '火車', 'text': '全部壓縮擋(stl) \n 火車的主體 \n \n 擋板 \n \n 上蓋版 \n \n 下活塞 \n \n 下活塞連桿 \n \n 前車輪 \n \n 後車輪 \n \n 活塞桶 \n \n 下活塞連接桿 \n \n 火車組合件 \n \n', 'tags': '', 'url': '火車.html'}, {'title': '火車改版(第一版)', 'text': '組合圖 \n 丟入 CoppeliaSim連桿會出現錯誤，所以將活塞連桿改至第一個車輪 \n \n 下活塞(將活塞連接處改至右側) \n \n 下活塞連桿(新增 下活塞連桿，以連結第一個車輪 ) \n \n 前車輪(新增連接下活塞連桿的銷) \n \n 後車輪(在連接處另一面增加配重使運動更順暢) \n \n 活塞桶(縮短滑行軌道以配合連接桿運動) \n \n 下活塞連接桿(縮短下活塞連接桿尺寸以配合前輪與下活塞運動) \n \n', 'tags': '', 'url': '火車改版(第一版).html'}, {'title': '火車改版(最終板)', 'text': '零件檔 \n 將所有零件簡化以達成 CoppeliaSim正常運作 \n \n \n 將擋門由滑軌機構改制開門的方式運作 \n \n \n 新增鐵軌 \n \n', 'tags': '', 'url': '火車改版(最終板).html'}, {'title': '直播影片', 'text': '\n \n \n', 'tags': '', 'url': '直播影片.html'}, {'title': '模擬', 'text': '\n', 'tags': '', 'url': '模擬.html'}, {'title': '彈珠檯模擬', 'text': 'stage3模擬，但模擬過程中，一開始的擊球機構沒控制好的話會把球彈到後面去，這邊還需要修改一下，這次是用lua的程式碼下去，可以用鍵盤控制，分別是q、p、a、;、z、.。 \n \n \n import sim as vrep\nimport math\nimport random\nimport time\nimport keyboard\n \nprint (\'Start\')\n \n# Close eventual old connections\nvrep.simxFinish(-1)\n# Connect to V-REP remote server\nclientID = vrep.simxStart(\'127.0.0.1\', 19997, True, True, 5000, 5)\n  \nif clientID !=-1:\n    print (\'Connected to remote API server\')\n   \n    res = vrep.simxAddStatusbarMessage(\n        clientID, "40823222",\n        vrep.simx_opmode_oneshot)\n          \n    if res not in (vrep.simx_return_ok, vrep.simx_return_novalue_flag):\n        print("Could not add a message to the status bar.")\n          \n    opmode = vrep.simx_opmode_oneshot_wait\n     \n    vrep.simxStartSimulation(clientID, opmode)\n    ret,shaft1=vrep.simxGetObjectHandle(clientID,"joint1",opmode)\n    ret,shaft2=vrep.simxGetObjectHandle(clientID,"joint2",opmode)\n    ret,shaft3=vrep.simxGetObjectHandle(clientID,"joint3",opmode)\n\n    while True:\n        if keyboard.is_pressed("q"):\n            vrep.simxSetJointTargetPosition(clientID,shaft1,-200,opmode)\n            print("q")\n            \n        if keyboard.is_pressed("p"):\n            vrep.simxSetJointTargetPosition(clientID,shaft1,200,opmode)\n            print("p")\n            \n        if keyboard.is_pressed("a"):\n            vrep.simxSetJointTargetPosition(clientID,shaft2,90,opmode)\n            print("a")\n\n        if keyboard.is_pressed(";"):\n            vrep.simxSetJointTargetPosition(clientID,shaft2,0,opmode)\n            print(";")\n            \n        if keyboard.is_pressed("z"):\n            vrep.simxSetJointTargetPosition(clientID,shaft3,90,opmode)\n            print("z")\n\n        if keyboard.is_pressed("."):\n            vrep.simxSetJointTargetPosition(clientID,shaft3,0,opmode)\n            print(".")            \nelse:\n    print (\'Failed connecting to  remote API server\')\n    print (\'End\') \n \n if keyboard.is_pressed("q"):  vrep.simxSetJointTargetPosition(clientID,shaft1,-200,opmode) \n 假設說按鍵按q的話，shaft1的旋轉軸會移動角度到-200度。 \n', 'tags': '', 'url': '彈珠檯模擬.html'}, {'title': '火車模擬', 'text': 'coppeliasim 場景檔 \n \n 程式碼: \n import sim as vrep\nimport math\nimport random\nimport time\nimport keyboard\n  \nprint (\'Start\')\n  \n# Close eventual old connections\nvrep.simxFinish(-1)\n# Connect to V-REP remote server\nclientID = vrep.simxStart(\'192.168.1.110\', 19997, True, True, 5000, 5)\n   \nif clientID !=-1:\n    print (\'Connected to remote API server\')\n    \n    res = vrep.simxAddStatusbarMessage(\n        clientID, "all start",\n        vrep.simx_opmode_oneshot)\n           \n    if res not in (vrep.simx_return_ok, vrep.simx_return_novalue_flag):\n        print("Could not add a message to the status bar.")\n           \n    opmode = vrep.simx_opmode_oneshot_wait\n      \n    vrep.simxStartSimulation(clientID, opmode)\n    ret,wheel1=vrep.simxGetObjectHandle(clientID,"wheel_1",opmode)\n    ret,wheel2=vrep.simxGetObjectHandle(clientID,"wheel_2",opmode)\n    ret,wheel3=vrep.simxGetObjectHandle(clientID,"wheel_3",opmode)\n    ret,wheel4=vrep.simxGetObjectHandle(clientID,"wheel_4",opmode)\n \n    while True:\n        if keyboard.is_pressed("g"):\n            vrep.simxSetJointTargetVelocity(clientID,wheel1,20,opmode)\n            vrep.simxSetJointTargetVelocity(clientID,wheel2,20,opmode)\n            vrep.simxSetJointTargetVelocity(clientID,wheel3,20,opmode)\n            vrep.simxSetJointTargetVelocity(clientID,wheel4,20,opmode)\n            print("go")\n             \n        if keyboard.is_pressed("r"):\n            vrep.simxSetJointTargetVelocity(clientID,wheel1,-20,opmode)\n            vrep.simxSetJointTargetVelocity(clientID,wheel2,-20,opmode)\n            vrep.simxSetJointTargetVelocity(clientID,wheel3,-20,opmode)\n            vrep.simxSetJointTargetVelocity(clientID,wheel4,-20,opmode)\n            print("back")\n             \n        if keyboard.is_pressed("s"):\n            vrep.simxSetJointTargetVelocity(clientID,wheel1,0,opmode)\n            vrep.simxSetJointTargetVelocity(clientID,wheel2,0,opmode)\n            vrep.simxSetJointTargetVelocity(clientID,wheel3,0,opmode)\n            vrep.simxSetJointTargetVelocity(clientID,wheel4,0,opmode)\n            print("stop")\n         \nelse:\n    print (\'Failed connecting to  remote API server\')\n    print (\'End\') \n', 'tags': '', 'url': '火車模擬.html'}, {'title': 'W15', 'text': '', 'tags': '', 'url': 'W15.html'}, {'title': '影片整理', 'text': '影片1 \n \n 首先要先找出A1以及A2的夾角，可以透過畢氏定理列出 \n \n 並透過餘弦定理可以將公式轉換為 \n \n 將公式用COSalpha表示，並將r2次方帶入第一個公式得 \n \n 再透過下圖我們可以得知q2=180-alpha \n \n 因此可得知COSq2=-COSalpha，將負號移過去可以得到 \n \n 因此我們可以得知q2 \n \n 接下來，以a2為長邊畫出一個直角三角形 \n \n 由這個三角形我們可以得到 \n \n 此時劃出一個連接兩條手臂的直角三角形 \n \n 透過此三角形可得出beta角公式 \n \n 劃出一個大直角三角形 \n \n 由此三角形可推得 \n \n \n 透過前面所推導的公式q1可得 \n \n 若手臂移動，如下圖 \n \n 因alpha、beta以及q1關系改變 \n \n 則q1和q2公式會變為 \n \n \n \n 此為兩種比較圖 \n \n \n \n 特定的線性函數不是幾何，有一個表達式E \n 旋轉q1沿x方向平移a1；旋轉q2，由a2在x方向進行平移，如果展開這個，全部相乘 \n 一起轉變得到此表達式，表示尾端姿態的矩陣 \n \n 分解x與y座標 \n \n 平方X和Y方程式後兩兩相加可得知角度q2 \n \n \n 製作後的方程式: \n \n 此為已知方程式: \n \n 只考慮y的方程式，可以確定a、b、c值，一旦知道這些，那麼就可以有q1的方程式 \n \n \n 將前面得知地此式，帶入q1進行簡化 \n \n 即可得此式 \n \n ======= >>>>>>> 1adb32d0ef62bdf1b9851bfb00b5ec8ef2b5cd72', 'tags': '', 'url': '影片整理.html'}]};